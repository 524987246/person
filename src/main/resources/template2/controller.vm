package com.rsnet.rest.controller.user;

import javax.annotation.Resource;

import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.rsnet.model.entity.${name};
import com.rsnet.model.service.user.${name}Service;
import com.rsnet.rest.controller.BaseController;
import com.rsnet.core.mvc.Token;
import com.rsnet.tools.common.constant.SuccessConst;
import com.rsnet.tools.service.Page;
import com.rsnet.tools.service.Result;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;

@RestController
@RequestMapping("/sys/${name2}s")
@Api(value = "${name2}管理", tags = "${name2}管理")
public class ${name}Controller extends BaseController {
	@Resource
	private ${name}Service ${name2}Service;

	@ApiOperation(value = "进入列表页", notes = "进入列表页")
	@Token(save = true)
	@RequestMapping(value = "/showList", method = RequestMethod.GET)
	public Result<?> getListView() throws Exception {
		return toView("list");
	}

	@ApiOperation(value = "进入详情页", notes = "进入详情页")
	@Token(save = true)
	@RequestMapping(value = "/showInfo", method = RequestMethod.GET)
	public Result<?> getOneView() throws Exception {
		return toView("one");
	}

	@ApiOperation(value = "获取单个", notes = "")
	@RequestMapping(value = "/get", method = RequestMethod.GET)
	public Result<?> get(Long id) throws Exception {
		return Result.success(SuccessConst.OPERATE_SUCCESS, ${name2}Service.get(id));
	}

	@ApiOperation(value = "条件查询", notes = "")
	@RequestMapping(value = "/list", method = RequestMethod.GET)
	public Result<Page<${name}>> list(String param, int pageNum, int pageSize) throws Exception {
		// 查询参数处理
		param = "where id like '%" + param + "%'";
		return Result.success(SuccessConst.OPERATE_SUCCESS, ${name2}Service.find(param, pageNum, pageSize));
	}

	@ApiOperation(value = "新增", notes = "")
	@Token(remove = true)
	@RequestMapping(value = "/add", method = RequestMethod.PUT)
	public Result<?> add(${name} ${name2}) throws Exception {
		return Result.success(SuccessConst.OPERATE_SUCCESS, ${name2}Service.add(${name2}));
	}

	@ApiOperation(value = "删除", notes = "删除")
	@Token(remove = true)
	@RequestMapping(value = "/delete", method = RequestMethod.DELETE)
	public Result<?> delete(${name} ${name2}) throws Exception {
		return Result.success(SuccessConst.OPERATE_SUCCESS, ${name2}Service.delete(${name2}));
	}

	@ApiOperation(value = "批量删除", notes = "批量删除")
	@Token(remove = true)
	@RequestMapping(value = "/batchdelete", method = RequestMethod.DELETE)
	public Result<?> batchdelete(Long[] ids) throws Exception {
		return Result.success(SuccessConst.OPERATE_SUCCESS, ${name2}Service.batchdelete(ids));
	}

	@ApiOperation(value = "更新", notes = "更新")
	@Token(remove = true)
	@RequestMapping(value = "/edit", method = RequestMethod.PUT)
	public Result<?> edit(${name} ${name2}) throws Exception {
		return Result.success(SuccessConst.OPERATE_SUCCESS, ${name2}Service.edit(${name2}));
	}
}
